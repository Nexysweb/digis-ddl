{"version":3,"sources":["layout.js","components/icon.js","app.js","lib/types.js","lib/schema-validation.js","hoc.js","validation/schema.js","lib/query-validation.js","validation/query.js","open-api/index.js","router.js","serviceWorker.js","index.js"],"names":["style","borderTop","borderBottom","boxShadow","menus","link","name","props","header","className","to","map","menu","i","key","Fragment","children","href","jvmTypes","modelParamSchema","Joi","object","keys","string","alphanum","required","column","optional","type","boolean","permissions","array","description","modelSchema","uuid","table","fields","items","unique","a","b","constraints","modelDefSchema","validateModelDef","model","schema","result","validate","abortEarly","error","errors","console","log","ts","tNames","m","concat","p","filter","Types","indexOf","t","push","checkTypes","JSON","parse","length","status","details","x","message","stringify","path","isJson","j","err","validationFunc","WrappedComponent","handleSubmit","content","state","validation","setState","handleChange","target","value","this","renderError","renderSuccess","minWidth","height","placeholder","onChange","onClick","React","Component","ValidateComponent","wrapComponent","checkFields","projection","entity","ddl","projectionArray","Object","projectionField","field","find","projectionFieldValue","e","findEntity","reduce","y","isSchema","query","k","filters","ValidateQuery","body","hashmapBoolean","pattern","alternatives","try","number","lazy","params","references","take","skip","order","validationOptions","allowUnknown","isCrud","NotFound","withRouter","exact","component","Main","ValidateSchema","OpenAPi","Boolean","window","location","hostname","match","history","History","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAIMA,EAAQ,CACZC,UAAW,oBACXC,aAAc,oBACdC,UAAW,sCAKPC,EAAQ,CACb,CAACC,KAAM,mBAAoBC,KAAM,mBACjC,CAACD,KAAM,kBAAmBC,KAAM,kBAChC,CAACD,KAAM,WAAYC,KAAM,wBAGX,WAAAC,GACb,IAAMC,EAAU,gCACd,yBAAKR,MAAOA,EAAOS,UAAU,+EAC7B,wBAAIA,UAAU,sCAAqC,kBAAC,IAAD,CAAMC,GAAI,KAXnD,cAYV,yBAAKD,UAAU,wBACdL,EAAMO,KAAI,SAACC,EAAKC,GAAN,OAAY,kBAAC,IAAD,CAAMJ,UAAU,gBAAgBK,IAAKD,EAAGH,GAAIE,EAAKP,MAAOO,EAAKN,YAKtF,OAAQ,kBAAC,IAAMS,SAAP,KAAiBP,EAAO,yBAAKC,UAAU,aAAaF,EAAMS,YC1BrD,WAAAT,GAAU,IAEjBE,EAAY,SADDF,EAATD,KAER,OAAO,uBAAGG,UAAWA,KCDR,oBAAO,yBAAKA,UAAU,aACnC,2CACA,mGAEA,2BAAG,uBAAGQ,KAAK,yCAAwC,kBAAC,EAAD,CAAMX,KAAK,SAA3D,WAAH,wB,gBCPWY,EAAW,CAAC,MAAO,OAAQ,SAAU,gBAAiB,YAAa,UAAW,aAAc,UCEnGC,EAAmBC,IAAIC,SAASC,KAAK,CACzChB,KAAMc,IAAIG,SAASC,WAAWC,WAC9BC,OAAQN,IAAIG,SAASI,WACrBC,KAAMR,IAAIG,SAASC,WAAWC,WAC9BE,SAAUP,IAAIS,UACdC,YAAaV,IAAIW,QAAQJ,WACzBK,YAAaZ,IAAIG,SAASI,aAKtBM,EAAcb,IAAIC,SAASC,KAAK,CACpChB,KAAMc,IAAIG,SAASC,WAAWC,WAC9BS,KAAMd,IAAIS,UAAUF,WACpBQ,MAAOf,IAAIG,SAASI,WACpBK,YAAaZ,IAAIG,SAASI,WAC1BS,OAAQhB,IAAIW,QAAQM,MAAMlB,GAAkBmB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEjC,OAASkC,EAAElC,QAAMmB,WAChFK,YAAaV,IAAIW,QAAQJ,WACzBc,YAAarB,IAAIW,UAGbW,EAAiBtB,IAAIW,QAAQM,MAAMJ,GAAaR,WAgChDkB,EAAmB,SAAAC,GACvB,IAAMC,EAASH,EAETI,EAAS1B,IAAI2B,SAASH,EAAOC,EAAQ,CAAEG,YAAY,IAEzD,GAAqB,OAAjBF,EAAOG,MAAgB,CAEzB,IAAMC,EApCS,SAAAN,GACjBO,QAAQC,WAAWR,GACnB,IAAIS,EAAK,GAEHC,EAASV,EAAMjC,KAAI,SAAA4C,GAKvB,OAJAF,EAAKA,EAAGG,OACND,EAAEnB,OAAOzB,KAAI,SAAA8C,GAAC,OAAIA,EAAC,QAAUC,QAAO,SAAAD,GAAC,OAAIE,EAAMC,QAAQH,GAAK,MAGvDF,EAAEjD,QAGX6C,QAAQC,IAAIE,GAEZ,IAAIJ,EAAS,GASb,OAPAG,EAAG1C,KAAI,SAAAkD,GAIL,OAHIP,EAAOM,QAAQC,GAAK,GACtBX,EAAOY,KAAP,WAAgBD,EAAhB,+DAEK,KAGFX,EAaUa,CAAWC,KAAKC,MAAMrB,IAErC,OAAIM,EAAOgB,OAAS,EACX,CAACC,QAAQ,EAAOjB,UAEhB,CAACiB,QAAQ,EAAMjB,OAAQ,MAKhC,MAAO,CAACiB,QAAQ,EAAOjB,OAFRJ,EAAOG,MAAMmB,QAAQzD,KAAI,SAAA0D,GAAC,OAAIA,EAAEC,QAAU,IAAMN,KAAKO,UAAUF,EAAEG,W,6CCrE9EC,EAAS,SAAAC,GACb,IAEE,OADAV,KAAKC,MAAMS,IACJ,EACP,MAAOC,GACP,OAAO,IAII,WAACC,GAAD,OAAoB,SAAAC,GAAgB,mBACjD,WAAatE,GAAQ,IAAD,8BAClB,4CAAMA,KAKRuE,aAAe,WAAO,IACZC,EAAY,EAAKC,MAAjBD,QAGR,GAAKN,EAAOM,GAAZ,CAOA,IAAME,EAAaL,EAAeG,GAGlC,GAFA5B,QAAQC,IAAI6B,GAETA,EAAW/B,OACZ,EAAKgC,SAAS,CAAChC,OAAQ+B,EAAW/B,OAAQoB,QAAS,WADrD,CASA,EAAKY,SAAS,CAAChC,OAHA,KAGQoB,QAFP,+CAjBhB,CAEE,EAAKY,SAAS,CAAChC,OADA,CAAC,0DACOoB,QAAS,SAZhB,EAgCpBa,aAAe,SAAC5C,GACd,IAAMwC,EAAUxC,EAAE6C,OAAOC,MAEzB,EAAKH,SAAS,CAACH,aAhCf,EAAKC,MAAQ,CAACD,QAAS,GAAI7B,OAAQ,MAHjB,EAD6B,2EAuClC,IACLA,EAAWoC,KAAKN,MAAhB9B,OAER,OAAKA,EAIG,wBAAIzC,UAAU,cACnByC,EAAOvC,KAAI,SAACsC,EAAOpC,GAClB,OAAO,wBAAIJ,UAAU,yCAAyCK,IAAKD,GAAIoC,OALlE,OA3CsC,sCAqDhC,IACPqB,EAAYgB,KAAKN,MAAjBV,QACR,OAAKA,EAIE,uBAAG7D,UAAU,uBAAuB6D,GAHlC,OAxDsC,+BA8DvC,IACDS,EAAWO,KAAKN,MAAhBD,QACP,OAAQ,kBAAC,IAAMhE,SAAP,KAELuE,KAAKC,cACLD,KAAKE,gBAEN,yBAAK/E,UAAU,OACb,yBAAKA,UAAU,aACb,8BAAUA,UAAU,eAAeT,MAAO,CAACyF,SAAU,OAAQC,OAAQ,SAAUC,YAAa,wBAAyBN,MAAON,EAASa,SAAUN,KAAKH,iBAGxJ,yBAAK1E,UAAU,OACb,yBAAKA,UAAU,OACb,4BAAQA,UAAU,kBAAkBmB,KAAK,SAASiE,QAASP,KAAKR,cAAhE,mBA5EyC,GAAsBgB,IAAMC,aCUzEC,EAAoBC,GAfH,SAAAlB,GACrB,IAAME,EAAatC,EAAiBoC,GAEpC,OAAGE,IAAeA,EAAWd,OAMpB,CAACjB,OALO,CAAC,0EAA0EM,OAAOyB,EAAW/B,OAAOvC,KAAI,SAAA0D,GACrH,OAAOA,OAOJY,IAGiBgB,EAA8B,eAEzC,oBAAO,yBAAKxF,UAAU,aACnC,iDACA,kBAACuF,EAAD,QCyBWE,EAAc,SAAdA,EAAeC,EAAYC,EAAQC,GAC9C,IAAKF,EACH,OAAO,EAIT,IAAMG,EAAkBC,OAAOjF,KAAK6E,GAGpC,OAA8B,IAA3BG,EAAgBpC,QAIZoC,EAAgB3F,KAAI,SAAA6F,GACzB,IAAMC,EAAQL,EAAOhE,OAAOsE,MAAK,SAAArC,GAAC,OAAIA,EAAE/D,OAASkG,KAEjD,IAAKC,EAEH,OADAtD,QAAQF,MAAR,qBAA4BmD,EAAO9F,KAAnC,yBAAwDkG,EAAxD,sBACO,EAGT,IAAMG,EAAuBR,EAAWK,GAExC,GAAoC,kBAAzBG,EAAmC,CAE5C,IAAMC,EAAIC,EAAWJ,EAAM7E,KAAMyE,GAEjC,QAAKO,GAIEV,EAAYS,EAAsBC,EAAGP,GAG9C,OAAO,KACNS,QAAO,SAACzC,EAAG0C,GAAJ,SAAa1C,IAAM0C,OAGlBF,EAAa,SAACT,EAAQC,GACjC,IAAMO,EAAIP,EAAIK,MAAK,SAAArC,GAAC,OAAIA,EAAE/D,OAAS8F,KAMnC,OAJKQ,GACHzD,QAAQF,MAAR,sBAA6BmD,EAA7B,kCAGKQ,GASII,EAAW,SAACC,EAAOZ,GAkB9B,OAjBoBE,OAAOjF,KAAK2F,GAAOtG,KAAI,SAAAuG,GAEzC,IAAMd,EAASS,EAAWK,EAAGb,GAE7B,GAAID,EAAQ,CAGV,IAAM3C,EAAIyC,EAAYe,EAAMC,GAAGf,WAAYC,EAAQC,GAInD,SAFUH,EAAYe,EAAMC,GAAGC,QAASf,EAAQC,KAEhC5C,GAGlB,OAAO,KAGUqD,QAAO,SAACzC,EAAG0C,GAAJ,SAAa1C,IAAM0C,OC1GzCK,EAAgBnB,GAVE,SAAAlB,GACtB,IAAME,EDEc,SAACoC,GAAwB,IAAlBzE,EAAiB,uDAAT,KAG7B0E,EAAiBlG,IAAIC,SAASkG,QAAQ,KAAMnG,IAAIoG,eAAeC,IAAIrG,IAAIS,UAAWT,IAAIsG,SAAUtG,IAAIG,SAAUH,IAAIW,QAASX,IAAIuG,MAAK,kBAAML,OAE1IzE,EAASzB,IAAIC,SAASkG,QAAQ,KAAMnG,IAAIC,SAASC,KAAK,CAC1DsG,OAAQN,EAAe3F,WACvBwE,WAAYmB,EAAe3F,WAC3BkG,WAAYP,EAAe3F,WAC3BwF,QAASG,EAAe3F,WACxBmG,KAAM1G,IAAIsG,SAAS/F,WACnBoG,KAAM3G,IAAIsG,SAAS/F,WACnBqG,MAAOV,EAAe3F,cAGlBsG,EAAoB,CACxBjF,YAAY,EACZkF,cAAc,GAGVpF,EAAS1B,IAAI2B,SAASsE,EAAMxE,EAAQoF,GAE1C,OAAKnF,EAAOG,OAOVE,QAAQF,MAAMe,KAAKO,UAAUzB,EAAOG,SAC7B,IAPHL,GACKoE,EAASK,EAAMzE,GC1BPuF,CAAOpD,GAE1B,OAAKE,GACI,CAAE/B,OAAQ,CAAC,kEAMA+C,EAA+B,eAEtC,oBAAO,yBAAKxF,UAAU,aACnC,gDACA,kBAAC2G,EAAD,QClBa,oBAAO,yBAAK3G,UAAU,aACnC,2CACA,uCAAY,uBAAGQ,KAAK,8EAAR,0BAEZ,2BAAG,sCCQCmH,EAAW,kBAAM,8CAcRC,mBAZf,SAAgB9H,GACd,OAAQ,kBAAC,EAAD,KACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+H,OAAK,EAAC9D,KAAM,IAAK+D,UAAWC,IACnC,kBAAC,IAAD,CAAOF,OAAK,EAAC9D,KAAM,mBAAoB+D,UAAWE,IAClD,kBAAC,IAAD,CAAOH,OAAK,EAAC9D,KAAM,kBAAmB+D,UAAWnB,IACjD,kBAAC,IAAD,CAAOkB,OAAK,EAAC9D,KAAM,WAAY+D,UAAWG,IAC1C,kBAAC,IAAD,CAAOlE,KAAK,IAAI+D,UAAWH,SCXbO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EAAUC,IAA6B,CAC3CC,SAAUC,eAGZC,IAASC,OAAO,kBAAC,IAAD,CAAQL,QAASA,GAAS,kBAAC,EAAD,OAAuBM,SAASC,eAAe,SDoHnF,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f11f382e.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nconst title = 'Digis DDL';\n\nconst menus = [ \n {link: '/validate/schema', name: 'Validate Schema'},\n {link: '/validate/query', name: 'Validate Query'},\n {link: '/openApi', name: 'Open Api Conversion'},\n];\n\nexport default props => {\n  const header = (<header>\n    <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n    <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to={'/'}>{title}</Link></h5>\n    <nav className=\"my-2 my-md-0 mr-md-3\">\n    {menus.map((menu,i) => <Link className=\"p-2 text-dark\" key={i} to={menu.link}>{menu.name}</Link>)}\n    </nav>\n  </div>\n  </header>);\n\n  return (<React.Fragment>{header}<div className=\"container\">{props.children}</div></React.Fragment>);\n}","import React from 'react';\n\nexport default props => {\n  const { name } = props;\n  const className = 'fa fa-' + name;\n  return <i className={className}/>;\n}","import React from 'react';\n\nimport Icon from './components/icon';\n\nexport default () => (<div className=\"container\">\n  <h1>DDL Checker</h1>\n  <p>Use the menu to explore the different functionalities of the package</p>\n\n  <p><a href=\"https://github.com/Nexysweb/digis-ddl\"><Icon name=\"code\"/> Source</a> under MIT license</p>\n</div>);\n\n","// list of JVM types that are supported\nexport const jvmTypes = ['Int', 'Long', 'Double', 'LocalDateTime', 'LocalDate', 'Boolean', 'BigDecimal', 'String'];\n\nexport const jvmToSqlType = i => {\n  switch (i) {\n    case 'Int':\n      return 'INT';\n    case 'Long':\n      return 'BIGINT';\n    case 'Double':\n      return 'FLOAT';\n    //case 'DateTime': // datetime is not accepted\n    case 'LocalDateTime':\n      //return 'TIMESTAMP'; //TODO: Fix ambiguity between timestamp & datetime\n      return 'DATETIME';\n    case 'LocalDate':\n      return 'DATE';\n    case 'Boolean':\n      return 'BIT';\n    case 'BigDecimal':\n      return 'DECIMAL(12,4)';\n    case 'String':\n      return 'VARCHAR(512)'; //TODO: Fix hardcoded length\n    default:\n      console.log(`Couldn't translate \"${i}\" to SQL type, fallback to \\`BIGINT\\`.`);\n      return 'BIGINT';\n  }\n};\n\nexport const sqlToJvmType = i => {\n  switch (i.toLowerCase()) {\n    case 'int':\n      return 'Int';\n    case 'bigint':\n      return 'Long';\n    case 'timestamp':\n      return 'LocalDateTime';\n    case 'date':\n      return 'LocalDate';\n    case 'datetime':\n      return 'LocalDateTime';\n    case 'bit':\n      return 'Boolean';\n    case 'decimal':\n      return 'BigDecimal';\n    case 'float':\n      return 'Double';\n    case 'char':\n    case 'text':\n    case 'varchar':\n      return 'String';\n    default:\n      throw new Error(`Couldn't translate \"${i}\" to JVM type.`)\n  }\n};\n\nexport const modelToSqlType = jvmToSqlType;\nexport const modelToJvmType = (x) => x; // Currently equivalent\n\n","import Joi from 'joi';\nimport { jvmTypes as Types } from './types';\n\nconst modelParamSchema = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  column: Joi.string().optional(),\n  type: Joi.string().alphanum().required(),\n  optional: Joi.boolean(),\n  permissions: Joi.array().optional(),\n  description: Joi.string().optional()\n});\n\n// for params, the value of `arg` has to be unique\n// https://github.com/hapijs/joi/issues/1159]\nconst modelSchema = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  uuid: Joi.boolean().optional(),\n  table: Joi.string().optional(),\n  description: Joi.string().optional(),\n  fields: Joi.array().items(modelParamSchema).unique((a, b) => a.name === b.name).required(),\n  permissions: Joi.array().optional(),\n  constraints: Joi.array()\n});\n\nconst modelDefSchema = Joi.array().items(modelSchema).required();\n\n\nconst checkTypes = model => {\n  console.log(typeof model)\n  let ts = []\n\n  const tNames = model.map(m => {\n    ts = ts.concat(\n      m.fields.map(p => p['type']).filter(p => Types.indexOf(p) < 0)\n    );\n\n    return m.name\n  });\n\n  console.log(tNames)\n\n  let errors = [];\n\n  ts.map(t => {\n    if (tNames.indexOf(t) < 0) {\n      errors.push(`\"${t}\" is referenced as a type in params but was never defined`)\n    }\n    return true;\n  });\n\n  return errors;\n}\n\n/**\n * validates a model of the JSON ddl\n */\nconst validateModelDef = model => {\n  const schema = modelDefSchema;\n\n  const result = Joi.validate(model, schema, { abortEarly: false });\n\n  if (result.error === null) {\n    // here check if types all exist\n    const errors = checkTypes(JSON.parse(model));\n\n    if (errors.length > 0) {\n      return {status: false, errors};\n    } else {\n      return {status: true, errors: null};\n    }\n  } else {\n    const errors = result.error.details.map(x => x.message + ' ' + JSON.stringify(x.path));\n\n    return {status: false, errors};\n  }\n}\n\nexport { validateModelDef };\n","import React from 'react';\n\nconst isJson = j => {\n  try {\n    JSON.parse(j)\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport default (validationFunc) => WrappedComponent => class Hoc extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {content: '', errors: null};\n  }\n\n  handleSubmit = () => {\n    const { content } = this.state;\n\n    // 1 check if JSON\n    if (!isJson(content)) {\n      const errors = ['the string you entered is not a JSON string, try again'];\n      this.setState({errors, message: null});\n      return;\n    }\n\n    // 2 check if it is a DDL file\n    const validation = validationFunc(content);\n    console.log(validation)\n    \n    if(validation.errors) {\n      this.setState({errors: validation.errors, message: null});\n      return;\n    }\n\n    // else\n    const errors = null;\n    const message = 'Congratulations, this is a valid file';\n\n    this.setState({errors, message});\n  }\n\n  handleChange = (a) => {\n    const content = a.target.value;\n\n    this.setState({content});\n  }\n\n  renderError() {\n    const { errors } = this.state;\n\n    if (!errors) {\n      return null;\n    }\n\n    return (<ul className=\"list-group\">\n      {errors.map((error, i) => {\n        return <li className=\"list-group-item list-group-item-danger\" key={i}>{error}</li>\n      })}\n    </ul>)\n  }\n\n  renderSuccess() {\n    const { message } = this.state;\n    if (!message) {\n      return null;\n    }\n\n    return <p className=\"alert alert-success\">{message}</p>;\n  }\n\n  render() {\n    const {content} = this.state;\n    return (<React.Fragment>\n\n      {this.renderError()}\n      {this.renderSuccess()}\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={content} onChange={this.handleChange}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <button className=\"btn btn-primary\" type=\"submit\" onClick={this.handleSubmit}>Validate</button>\n        </div>\n      </div>\n    </React.Fragment>)\n  }\n}\n","import React from 'react'\n\nimport { validateModelDef } from '../lib/schema-validation';\n\nimport wrapComponent from '../hoc'\n\nconst validateSchema = content => {\n  const validation = validateModelDef(content)\n\n  if(validation && !validation.status) {\n    const errors = ['the string you entered is not a properly formatted DDL file, try again'].concat(validation.errors.map(x => {\n      return x;\n    })\n    );\n\n    return {errors};\n  }\n\n  return validation;\n}\n\nconst ValidateComponent = wrapComponent(validateSchema)(() => {});\n\nexport default () => (<div className=\"container\">\n  <h2>Schema Validation</h2>\n  <ValidateComponent/>\n</div>);\n\n","// to move to lib\nimport Joi from 'joi';\n\n/**\n * validate query that is used to query crud `/data` endpoint\n * @param body payload that is sent\n * @param model [optional], if given check that query fields match the ones of the model\n * @return true or false with and prints errors\n */\nexport const isCrud = (body, model = null) => {\n  // to validate hashmap: https://github.com/hapijs/joi/issues/1294\n  // lazy (for recursive validation): https://stackoverflow.com/questions/51477603/using-joi-how-to-define-recursive-array-of-objects-validation-with-n-depth\n  const hashmapBoolean = Joi.object().pattern(/\\w/, Joi.alternatives().try(Joi.boolean(), Joi.number(), Joi.string(), Joi.array(), Joi.lazy(() => hashmapBoolean)));\n\n  const schema = Joi.object().pattern(/\\w/, Joi.object().keys({\n    params: hashmapBoolean.optional(),\n    projection: hashmapBoolean.optional(),\n    references: hashmapBoolean.optional(),\n    filters: hashmapBoolean.optional(),\n    take: Joi.number().optional(),\n    skip: Joi.number().optional(),\n    order: hashmapBoolean.optional()\n  }));\n\n  const validationOptions = {\n    abortEarly: false, // do not stop after first error\n    allowUnknown: false\n  };\n\n  const result = Joi.validate(body, schema, validationOptions);\n\n  if (!result.error) {\n    if (model) {\n      return isSchema(body, model)\n    }\n\n    return true;\n  } else {\n    console.error(JSON.stringify(result.error));\n    return false;\n  }\n}\n\n/**\n * check `projection` and `filters`\n * @param  {[type]} projection : projectio or filters object\n * @param  {[type]} entity  : model entity\n * @param  {[type]} ddl    : full model\n * @return {[type]}   true/false\n */\nexport const checkFields = (projection, entity, ddl) => {\n  if (!projection) {\n    return true;\n  }\n\n  // turn into array\n  const projectionArray = Object.keys(projection);\n\n  // make sure array length > 0 (otherwise reduce returns error)\n  if(projectionArray.length === 0) {\n    return true;\n  }\n\n  return projectionArray.map(projectionField => {\n    const field = entity.fields.find(x => x.name === projectionField);\n\n    if (!field) {\n      console.error(`In entity \"${entity.name}\", the field \"${projectionField}\" does not exist`);\n      return false;\n    }\n\n    const projectionFieldValue = projection[projectionField];\n\n    if (typeof projectionFieldValue === 'object') {\n      // here check nesting\n      const e = findEntity(field.type, ddl);\n\n      if (!e) {\n        return false;\n      }\n      \n      return checkFields(projectionFieldValue, e, ddl);\n    }\n\n    return true;\n  }).reduce((x, y) => !(!x || !y));\n}\n\nexport const findEntity = (entity, ddl) => {\n  const e = ddl.find(x => x.name === entity);\n\n  if (!e) {\n    console.error(`The entity \"${entity}\" could not be found in model`);\n  }\n\n  return e;\n}\n\n/**\n * validate schema against query\n * @param  query: query [description]\n * @param ddl  model\n * @return true/false (prints detail about the error)\n */\nexport const isSchema = (query, ddl) => {\n  const allEntities = Object.keys(query).map(k => {\n\n    const entity = findEntity(k, ddl);\n\n    if (entity) {\n      // go through fields\n      // // projection\n      const p = checkFields(query[k].projection, entity, ddl);\n      // // filters\n      const f = checkFields(query[k].filters, entity, ddl);\n\n      return !(!f || !p);\n    }\n    \n    return false;\n  });\n\n  return allEntities.reduce((x, y) => !(!x || !y));\n}\n","import React from 'react'\n\nimport { isCrud } from '../lib/query-validation';\n\nimport wrapComponent from '../hoc'\n\nconst validationQuery = content => {\n  const validation = isCrud(content);\n\n  if (!validation) {\n    return { errors: ['the query is invalid, refer to the console for more details']};\n  }\n\n  return validation;\n}\n\nconst ValidateQuery = wrapComponent(validationQuery)(() => {});\n\nexport default () => (<div className=\"container\">\n  <h2>Query Validation</h2>\n  <ValidateQuery/>\n</div>);\n\n","import React from 'react'\n\nexport default () => (<div className=\"container\">\n  <h2>Open Api V3</h2>\n  <p>Based on <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md\">OpenAPI Specification</a></p>\n\n  <p><b>TODO</b></p>\n</div>);\n\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  withRouter\n} from 'react-router-dom';\n\nimport Layout from './layout';\n\nimport Main from './app';\nimport ValidateSchema from './validation/schema';\nimport ValidateQuery from './validation/query';\nimport OpenAPi from './open-api';\n\nconst NotFound = () => <p>Page Not Found</p>;\n\nfunction Router(props) {\n  return (<Layout>\n    <Switch>\n      <Route exact path={'/'} component={Main} />\n      <Route exact path={'/validate/schema'} component={ValidateSchema}/>\n      <Route exact path={'/validate/query'} component={ValidateQuery}/>\n      <Route exact path={'/openApi'} component={OpenAPi}/>\n      <Route path=\"/\" component={NotFound} />\n    </Switch>\n  </Layout>);\n}\n\nexport default withRouter(Router);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Router } from 'react-router-dom';\nimport * as History from 'history';\n\nimport RouterApp from './router';\nimport * as serviceWorker from './serviceWorker';\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || '',\n});\n\nReactDOM.render(<Router history={history}><RouterApp/></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}