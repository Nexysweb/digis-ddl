{"version":3,"sources":["lib/types.js","lib/schema-validation.js","lib/query-validation.js","hoc.js","app.js","serviceWorker.js","index.js"],"names":["jvmTypes","modelParamSchema","Joi","object","keys","name","string","alphanum","required","column","optional","type","boolean","permissions","array","description","modelSchema","uuid","table","fields","items","unique","a","b","constraints","modelDefSchema","validateModelDef","model","schema","result","validate","abortEarly","error","errors","console","log","ts","tNames","map","m","concat","p","filter","Types","indexOf","t","push","checkTypes","JSON","parse","length","status","details","x","message","stringify","path","checkFields","projection","entity","ddl","projectionArray","Object","projectionField","field","find","projectionFieldValue","e","findEntity","reduce","y","isSchema","query","k","filters","isJson","j","err","validationFunc","WrappedComponent","props","handleSubmit","content","state","validation","setState","handleChange","target","value","this","className","i","key","Fragment","renderError","renderSuccess","style","minWidth","height","placeholder","onChange","onClick","React","Component","ValidateComponent","wrapComponent","ValidateQuery","body","hashmapBoolean","pattern","alternatives","try","number","lazy","params","references","take","skip","order","validationOptions","allowUnknown","isCrud","Boolean","window","location","hostname","match","ReactDOM","render","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4af03e91.chunk.js","sourcesContent":["// list of JVM types that are supported\nexport const jvmTypes = ['Int', 'Long', 'Double', 'LocalDateTime', 'LocalDate', 'Boolean', 'BigDecimal', 'String'];\n\nexport const jvmToSqlType = i => {\n  switch (i) {\n    case 'Int':\n      return 'INT';\n    case 'Long':\n      return 'BIGINT';\n    case 'Double':\n      return 'FLOAT';\n    //case 'DateTime': // datetime is not accepted\n    case 'LocalDateTime':\n      //return 'TIMESTAMP'; //TODO: Fix ambiguity between timestamp & datetime\n      return 'DATETIME';\n    case 'LocalDate':\n      return 'DATE';\n    case 'Boolean':\n      return 'BIT';\n    case 'BigDecimal':\n      return 'DECIMAL(12,4)';\n    case 'String':\n      return 'VARCHAR(512)'; //TODO: Fix hardcoded length\n    default:\n      console.log(`Couldn't translate \"${i}\" to SQL type, fallback to \\`BIGINT\\`.`);\n      return 'BIGINT';\n  }\n};\n\nexport const sqlToJvmType = i => {\n  switch (i.toLowerCase()) {\n    case 'int':\n      return 'Int';\n    case 'bigint':\n      return 'Long';\n    case 'timestamp':\n      return 'LocalDateTime';\n    case 'date':\n      return 'LocalDate';\n    case 'datetime':\n      return 'LocalDateTime';\n    case 'bit':\n      return 'Boolean';\n    case 'decimal':\n      return 'BigDecimal';\n    case 'float':\n      return 'Double';\n    case 'char':\n    case 'text':\n    case 'varchar':\n      return 'String';\n    default:\n      throw new Error(`Couldn't translate \"${i}\" to JVM type.`)\n  }\n};\n\nexport const modelToSqlType = jvmToSqlType;\nexport const modelToJvmType = (x) => x; // Currently equivalent\n\n","import Joi from 'joi';\nimport { jvmTypes as Types } from './types';\n\nconst modelParamSchema = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  column: Joi.string().optional(),\n  type: Joi.string().alphanum().required(),\n  optional: Joi.boolean(),\n  permissions: Joi.array().optional(),\n  description: Joi.string().optional()\n});\n\n// for params, the value of `arg` has to be unique\n// https://github.com/hapijs/joi/issues/1159]\nconst modelSchema = Joi.object().keys({\n  name: Joi.string().alphanum().required(),\n  uuid: Joi.boolean().optional(),\n  table: Joi.string().optional(),\n  description: Joi.string().optional(),\n  fields: Joi.array().items(modelParamSchema).unique((a, b) => a.name === b.name).required(),\n  permissions: Joi.array().optional(),\n  constraints: Joi.array()\n});\n\nconst modelDefSchema = Joi.array().items(modelSchema).required();\n\n\nconst checkTypes = model => {\n  console.log(typeof model)\n  let ts = []\n\n  const tNames = model.map(m => {\n    ts = ts.concat(\n      m.fields.map(p => p['type']).filter(p => Types.indexOf(p) < 0)\n    );\n\n    return m.name\n  });\n\n  console.log(tNames)\n\n  let errors = [];\n\n  ts.map(t => {\n    if (tNames.indexOf(t) < 0) {\n      errors.push(`\"${t}\" is referenced as a type in params but was never defined`)\n    }\n    return true;\n  });\n\n  return errors;\n}\n\n/**\n * validates a model of the JSON ddl\n */\nconst validateModelDef = model => {\n  const schema = modelDefSchema;\n\n  const result = Joi.validate(model, schema, { abortEarly: false });\n\n  if (result.error === null) {\n    // here check if types all exist\n    const errors = checkTypes(JSON.parse(model));\n\n    if (errors.length > 0) {\n      return {status: false, errors};\n    } else {\n      return {status: true, errors: null};\n    }\n  } else {\n    const errors = result.error.details.map(x => x.message + ' ' + JSON.stringify(x.path));\n\n    return {status: false, errors};\n  }\n}\n\nexport { validateModelDef };\n","// to move to lib\nimport Joi from 'joi';\n\n/**\n * validate query that is used to query crud `/data` endpoint\n * @param body payload that is sent\n * @param model [optional], if given check that query fields match the ones of the model\n * @return true or false with and prints errors\n */\nexport const isCrud = (body, model = null) => {\n  // to validate hashmap: https://github.com/hapijs/joi/issues/1294\n  // lazy (for recursive validation): https://stackoverflow.com/questions/51477603/using-joi-how-to-define-recursive-array-of-objects-validation-with-n-depth\n  const hashmapBoolean = Joi.object().pattern(/\\w/, Joi.alternatives().try(Joi.boolean(), Joi.number(), Joi.string(), Joi.array(), Joi.lazy(() => hashmapBoolean)));\n\n  const schema = Joi.object().pattern(/\\w/, Joi.object().keys({\n    params: hashmapBoolean.optional(),\n    projection: hashmapBoolean.optional(),\n    references: hashmapBoolean.optional(),\n    filters: hashmapBoolean.optional(),\n    take: Joi.number().optional(),\n    skip: Joi.number().optional(),\n    order: hashmapBoolean.optional()\n  }));\n\n  const validationOptions = {\n    abortEarly: false, // do not stop after first error\n    allowUnknown: false\n  };\n\n  const result = Joi.validate(body, schema, validationOptions);\n\n  if (!result.error) {\n    if (model) {\n      return isSchema(body, model)\n    }\n\n    return true;\n  } else {\n    console.error(JSON.stringify(result.error));\n    return false;\n  }\n}\n\n/**\n * check `projection` and `filters`\n * @param  {[type]} projection : projectio or filters object\n * @param  {[type]} entity  : model entity\n * @param  {[type]} ddl    : full model\n * @return {[type]}   true/false\n */\nexport const checkFields = (projection, entity, ddl) => {\n  if (!projection) {\n    return true;\n  }\n\n  // turn into array\n  const projectionArray = Object.keys(projection);\n\n  // make sure array length > 0 (otherwise reduce returns error)\n  if(projectionArray.length === 0) {\n    return true;\n  }\n\n  return projectionArray.map(projectionField => {\n    const field = entity.fields.find(x => x.name === projectionField);\n\n    if (!field) {\n      console.error(`In entity \"${entity.name}\", the field \"${projectionField}\" does not exist`);\n      return false;\n    }\n\n    const projectionFieldValue = projection[projectionField];\n\n    if (typeof projectionFieldValue === 'object') {\n      // here check nesting\n      const e = findEntity(field.type, ddl);\n\n      if (!e) {\n        return false;\n      }\n      \n      return checkFields(projectionFieldValue, e, ddl);\n    }\n\n    return true;\n  }).reduce((x, y) => !(!x || !y));\n}\n\nexport const findEntity = (entity, ddl) => {\n  const e = ddl.find(x => x.name === entity);\n\n  if (!e) {\n    console.error(`The entity \"${entity}\" could not be found in model`);\n  }\n\n  return e;\n}\n\n/**\n * validate schema against query\n * @param  query: query [description]\n * @param ddl  model\n * @return true/false (prints detail about the error)\n */\nexport const isSchema = (query, ddl) => {\n  const allEntities = Object.keys(query).map(k => {\n\n    const entity = findEntity(k, ddl);\n\n    if (entity) {\n      // go through fields\n      // // projection\n      const p = checkFields(query[k].projection, entity, ddl);\n      // // filters\n      const f = checkFields(query[k].filters, entity, ddl);\n\n      return !(!f || !p);\n    }\n    \n    return false;\n  });\n\n  return allEntities.reduce((x, y) => !(!x || !y));\n}\n","import React from 'react';\n\nconst isJson = j => {\n  try {\n    JSON.parse(j)\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport default (validationFunc) => WrappedComponent => class Hoc extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {content: '', errors: null};\n  }\n\n  handleSubmit = () => {\n    const { content } = this.state;\n\n    // 1 check if JSON\n    if (!isJson(content)) {\n      const errors = ['the string you entered is not a JSON string, try again'];\n      this.setState({errors, message: null});\n      return;\n    }\n\n    // 2 check if it is a DDL file\n    const validation = validationFunc(content);\n    console.log(validation)\n    \n    if(validation.errors) {\n      this.setState({errors: validation.errors, message: null});\n      return;\n    }\n\n    // else\n    const errors = null;\n    const message = 'Congratulations, this is a valid file';\n\n    this.setState({errors, message});\n  }\n\n  handleChange = (a) => {\n    const content = a.target.value;\n\n    this.setState({content});\n  }\n\n  renderError() {\n    const { errors } = this.state;\n\n    if (!errors) {\n      return null;\n    }\n\n    return (<ul className=\"list-group\">\n      {errors.map((error, i) => {\n        return <li className=\"list-group-item list-group-item-danger\" key={i}>{error}</li>\n      })}\n    </ul>)\n  }\n\n  renderSuccess() {\n    const { message } = this.state;\n    if (!message) {\n      return null;\n    }\n\n    return <p className=\"alert alert-success\">{message}</p>;\n  }\n\n  render() {\n    const {content} = this.state;\n    return (<React.Fragment>\n\n      {this.renderError()}\n      {this.renderSuccess()}\n\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={content} onChange={this.handleChange}/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <button className=\"btn btn-primary\" type=\"submit\" onClick={this.handleSubmit}>Validate</button>\n        </div>\n      </div>\n    </React.Fragment>)\n  }\n}\n","import React from 'react'\n\nimport { validateModelDef } from './lib/schema-validation';\nimport { isCrud } from './lib/query-validation';\n\nimport wrapComponent from './hoc'\n\nconst validateSchema = content => {\n  const validation = validateModelDef(content)\n\n  if(validation && !validation.status) {\n    const errors = ['the string you entered is not a properly formatted DDL file, try again'].concat(validation.errors.map(x => {\n      return x;\n    })\n    );\n\n    return {errors};\n  }\n\n  return validation;\n}\n\nconst validationQuery = content => {\n  const validation = isCrud(content);\n\n  if (!validation) {\n    return { errors: ['the query is invalid, refer to the console for more details']};\n  }\n\n  return validation;\n}\n\nconst ValidateComponent = wrapComponent(validateSchema)(() => {});\nconst ValidateQuery = wrapComponent(validationQuery)(() => {});\n\nexport default () => (<div className=\"container\">\n  <h1>DDL Checker</h1>\n  <p>Details <a href=\"../\">here</a></p>\n\n  <h2>Schema Validation</h2>\n  <ValidateComponent/>\n\n  <h2>Query Validation</h2>\n  <ValidateQuery/>\n</div>);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app'; \n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('appcontainer'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}